package dao;

import static dao.DAOUtilities.closeAll;
import static dao.DAOUtilities.initPreparedStatement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.ZoneId;

import beans.Bean;
import beans.Candidate;

public class CandidateDAO extends ObjectDAO {
	
	public CandidateDAO(DAOFactory daoFactory) {
		super(daoFactory);
	}

	@Override
	public void create(Bean bean) throws DAOException {
		Candidate candidate = (Candidate) bean;
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, 
					"INSERT INTO candidates (title, lastName, firstName, email, livesAt, street, numStreet, "
					+ "postCode, locality, country, requestDate, insertDate, updateDate, sendDate, "
					+ "writer, jobFunction, answer) "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW(), ?, ?, ?, ?)", true, 
					candidate.getTitle(), 
					candidate.getLastName(), 
					candidate.getFirstName(),
					candidate.getEmail(),
					candidate.getLivesAt(),
					candidate.getStreet(),
					candidate.getNumStreet(),
					candidate.getPostCode(),
					candidate.getLocality(),
					candidate.getCountry(),
					candidate.getRequestDate(),
					// datetime -> NOW()
					candidate.getSendDate(),
					candidate.getWriter(),
					candidate.getJobFunction(),
					candidate.getAnswer()
			);
			
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
	            throw new DAOException("Fail to create new candidate");
	        }
			
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				candidate.setId(autoGeneratedValues.getLong(1));
			} else {
				throw new DAOException("Fail to create candidate, no auto generated id returned");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	@Override
	public Candidate read(Long id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Candidate candidate = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, "SELECT * FROM candidates WHERE id = ?", false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
	            candidate = map(resultSet);
	        }
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(resultSet, preparedStatement, connection);
		}
		
		return candidate;
	}
	
	@Override
	public void update(Bean bean) throws DAOException {
		// TODO Auto-generated method stub
	}

	@Override
	public void delete(Bean bean) throws DAOException {
		// TODO Auto-generated method stub
	}
	
	/**
	 * 
	 * @param r
	 * @return
	 * @throws SQLException
	 */
	private static Candidate map(ResultSet r) throws SQLException {
	    return new Candidate(r.getLong("id"), r.getString("title"), r.getString("lastName"), 
	    		r.getString("firstName"), r.getString("email"), r.getString("livesAt"), 
	    		r.getString("street"), r.getString("numStreet"), r.getString("postCode"), 
	    		r.getString("locality"), r.getString("country"), r.getDate("requestDate").toLocalDate(),
	    		LocalDateTime.ofInstant(r.getDate("insertDate").toInstant(), ZoneId.systemDefault()), 
	    		LocalDateTime.ofInstant(r.getDate("updateDate").toInstant(), ZoneId.systemDefault()), 
	    		LocalDateTime.ofInstant(r.getDate("sendDate").toInstant(), ZoneId.systemDefault()),
	    		r.getString("writer"), r.getString("jobFunction"),
	    		r.getString("answer"));
	}
}