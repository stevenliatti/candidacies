package dao;

import static dao.DAOUtilities.closeAll;
import static dao.DAOUtilities.initPreparedStatement;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import beans.Candidate;

public class CandidateDAO {
	private DAOFactory daoFactory;

	public CandidateDAO(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public void create(Candidate candidate) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, 
					"INSERT INTO users (title, last_name, first_name, email, lives_at, street, num_street, "
					+ "post_code, locality, country, request_date, insert_date, update_date, send_date, "
					+ "writer, job_type, job_function, answer "
					+ "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW(), NOW(), NULL, ?, ?, ?, ?)", true, 
					candidate.getTitle(), 
					candidate.getLastName(), 
					candidate.getFirstName(),
					candidate.getEmail(),
					candidate.getLivesAt(),
					candidate.getStreet(),
					candidate.getNumStreet(),
					candidate.getPostCode(),
					candidate.getLocality(),
					candidate.getCountry(),
					candidate.getRequestDate(),
					// datetime -> NOW() or null
					candidate.getWriter(),
					candidate.getJobType(),
					candidate.getJobFunction(),
					candidate.getAnswer());
			
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
	            throw new DAOException("Fail to create new candidate");
	        }
			
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				candidate.setId(autoGeneratedValues.getLong(1));
			} else {
				throw new DAOException("Fail to create candidate, no auto generated id returned");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	public Candidate read(Long id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Candidate candidate = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, "SELECT * FROM users WHERE id = ?", false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
	            //candidate = map(resultSet);
	        }
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(resultSet, preparedStatement, connection);
		}
		
		return candidate;
	}
	
	public void update(Candidate candidate) {
		
	}
	
	public void delete(Candidate candidate) {
		
	}
	
	/**
	 * 
	 * @param resultSet
	 * @return
	 * @throws SQLException
	 */
//	private static Candidate map(ResultSet resultSet) throws SQLException {
//		DateTimeFormatter formatter = DateTimeFormatter.ofPattern("d/MM/yyyy");
//	    return new Candidate(resultSet.getLong("id"), resultSet.getString("title"), resultSet.getString("last_name"), 
//	    		resultSet.getString("first_name"), resultSet.getString("email"), resultSet.getString("lives_at"), 
//	    		resultSet.getString("street"), resultSet.getString("num_street"), resultSet.getString("post_code"), 
//	    		resultSet.getString("locality"), resultSet.getString("country"), LocalDate.p,
//	    		resultSet.getDate("insert_date"), resultSet.getDate("update_date"), resultSet.getDate("send_date"),
//	    		resultSet.getString("writer"), resultSet.getString("job_type"), resultSet.getString("job_function"),
//	    		resultSet.getString("answer"));
//	    
//	}
}
