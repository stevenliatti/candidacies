package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import beans.User;

import static dao.DAOUtilities.*;

public class UserDAO {
	private DAOFactory daoFactory;

	public UserDAO(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}
	
	public void create(User user) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet autoGeneratedValues = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, "INSERT INTO users (user_name, password, last_name, "
					+ "first_name, initials VALUES (?, ?, ?, ?, ?)", true, user.getUserName(), user.getPassword(), 
					user.getLastName(), user.getFirstName(), user.getInitials());
			
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
	            throw new DAOException("Fail to create new user");
	        }
			
			autoGeneratedValues = preparedStatement.getGeneratedKeys();
			if (autoGeneratedValues.next()) {
				user.setId(autoGeneratedValues.getLong(1));
			} else {
				throw new DAOException("Fail to create user, no auto generated id returned");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(autoGeneratedValues, preparedStatement, connection);
		}
	}
	
	public User read(Long id) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		User user = null;
		
		try {
			connection = daoFactory.getConnection();
			preparedStatement = initPreparedStatement(connection, "SELECT * FROM users WHERE id = ?", false, id);
			resultSet = preparedStatement.executeQuery();
			if (resultSet.next()) {
	            user = map(resultSet);
	        }
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			closeAll(resultSet, preparedStatement, connection);
		}
		
		return user;
	}
	
	public void update(User user) {
		
	}
	
	public void delete(User user) {
		
	}
	
	/**
	 * 
	 * @param resultSet
	 * @return
	 * @throws SQLException
	 */
	private static User map(ResultSet resultSet) throws SQLException {
	    return new User(resultSet.getLong("id"), resultSet.getString("user_name"), resultSet.getString("password"), 
	    		resultSet.getString("last_name"), resultSet.getString("first_name"), resultSet.getString("initials"));
	}
}
